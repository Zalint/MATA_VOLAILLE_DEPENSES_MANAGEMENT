# üîç Script de Diagnostic Authentification Snapshot

Write-Host "üîç DIAGNOSTIC AUTHENTIFICATION SNAPSHOT PRODUCTION" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Green
Write-Host ""

$API_KEY = "4f8d9a2b6c7e8f1a3b5c9d0e2f4g6h7i"
$PROD_URL = "https://mata-depenses-management.onrender.com"

# Test 1: V√©rifier que le serveur r√©pond
Write-Host "1Ô∏è‚É£  TEST: Serveur accessible..." -ForegroundColor Cyan
try {
    $healthCheck = Invoke-WebRequest -Uri "$PROD_URL" -Method GET -TimeoutSec 10
    Write-Host "   ‚úÖ Serveur PROD accessible (Status: $($healthCheck.StatusCode))" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Serveur PROD inaccessible: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Test 2: Tenter cr√©ation snapshot pour diagnostiquer l'erreur
Write-Host "2Ô∏è‚É£  TEST: Cr√©ation snapshot (diagnostic)..." -ForegroundColor Cyan
try {
    $body = @{ cutoff_date = (Get-Date).ToString("yyyy-MM-dd") } | ConvertTo-Json
    
    $response = Invoke-WebRequest -Uri "$PROD_URL/external/api/snapshots/create" -Method POST -Headers @{
        "X-API-Key" = $API_KEY
        "Content-Type" = "application/json"
    } -Body $body -TimeoutSec 60
    
    $data = $response.Content | ConvertFrom-Json
    
    if ($data.success) {
        Write-Host "   ‚úÖ SNAPSHOT CR√â√â AVEC SUCC√àS !" -ForegroundColor Green
        Write-Host "   üéâ L'authentification fonctionne parfaitement !" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå √âchec snapshot: $($data.error)" -ForegroundColor Red
    }
    
} catch {
    $errorMsg = $_.Exception.Message
    Write-Host "   ‚ùå ERREUR: $errorMsg" -ForegroundColor Red
    
    # Analyser les erreurs courantes
    if ($errorMsg -like "*Could not find Chrome*") {
        Write-Host "   üîß DIAGNOSTIC: Chrome non install√© - Le postinstall a √©chou√©" -ForegroundColor Yellow
        Write-Host "   üí° SOLUTION: Red√©ployer le service sur Render" -ForegroundColor Cyan
    }
    elseif ($errorMsg -like "*Acc√®s refus√©*" -or $errorMsg -like "*Privil√®ges insuffisants*") {
        Write-Host "   üîß DIAGNOSTIC: Probl√®me d'authentification HTML" -ForegroundColor Yellow
        Write-Host "   üí° SOLUTION: V√©rifier SNAPSHOT_USERNAME et SNAPSHOT_PASSWORD sur Render" -ForegroundColor Cyan
        Write-Host "   üìã Variables requises:" -ForegroundColor White
        Write-Host "      SNAPSHOT_USERNAME=Saliou" -ForegroundColor White
        Write-Host "      SNAPSHOT_PASSWORD=Murex2015" -ForegroundColor White
    }
    elseif ($errorMsg -like "*timeout*") {
        Write-Host "   üîß DIAGNOSTIC: Timeout r√©seau ou serveur surcharg√©" -ForegroundColor Yellow
        Write-Host "   üí° SOLUTION: R√©essayer dans quelques minutes" -ForegroundColor Cyan
    }
    else {
        Write-Host "   üîß DIAGNOSTIC: Erreur inconnue" -ForegroundColor Yellow
        Write-Host "   üí° SOLUTION: V√©rifier les logs Render" -ForegroundColor Cyan
    }
}

Write-Host ""
Write-Host "üìã R√âSUM√â DES ACTIONS:" -ForegroundColor Yellow
Write-Host "1. Configurez les variables sur Render Dashboard" -ForegroundColor White
Write-Host "2. Attendez le red√©marrage (2-3 min)" -ForegroundColor White  
Write-Host "3. Relancez ce script pour v√©rifier" -ForegroundColor White
Write-Host ""
Write-Host "üîó Render Dashboard: https://dashboard.render.com" -ForegroundColor Cyan
