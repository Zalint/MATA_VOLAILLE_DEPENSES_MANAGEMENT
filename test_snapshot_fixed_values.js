// Test du snapshot avec valeurs scrap√©es corrig√©es
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testSnapshotFixedValues() {
    try {
        console.log('üß™ TEST: Snapshot avec valeurs HTML scrap√©es corrig√©es\n');
        
        const cutoffDate = '2025-09-17';
        
        // √âtape 1: Cr√©er un snapshot
        console.log('üì∏ Cr√©ation du snapshot...');
        const createResponse = await fetch('http://localhost:3000/api/snapshots/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Cookie': 'session_admin=test'
            },
            body: JSON.stringify({
                cutoff_date: cutoffDate
            })
        });
        
        if (!createResponse.ok) {
            console.log(`‚ùå Erreur cr√©ation: ${createResponse.status}`);
            const errorText = await createResponse.text();
            console.log('D√©tails:', errorText.substring(0, 200));
            return;
        }
        
        const createData = await createResponse.json();
        console.log('‚úÖ Snapshot cr√©√©:', createData.snapshot_date);
        
        // √âtape 2: Lire le snapshot
        console.log('\nüìñ Lecture du snapshot...');
        const readResponse = await fetch(`http://localhost:3000/api/snapshots/${cutoffDate}`, {
            method: 'GET',
            headers: {
                'Cookie': 'session_admin=test'
            }
        });
        
        if (!readResponse.ok) {
            console.log(`‚ùå Erreur lecture: ${readResponse.status}`);
            return;
        }
        
        const snapshotData = await readResponse.json();
        
        // √âtape 3: Analyser les valeurs
        console.log('\nüîç === ANALYSE DES VALEURS ===');
        
        if (snapshotData.data.dashboard) {
            const dashboard = snapshotData.data.dashboard;
            
            console.log('üìä DASHBOARD STATS:');
            if (dashboard.stats_cards) {
                console.log(`  PL FINAL: ${Math.round(dashboard.stats_cards.plFinal || 0).toLocaleString()} FCFA`);
                console.log(`  Cash Bictorys: ${Math.round(dashboard.stats_cards.cashBictorys || 0).toLocaleString()} FCFA`);
                console.log(`  Total D√©pens√©: ${Math.round(dashboard.stats_cards.totalSpent || 0).toLocaleString()} FCFA`);
                console.log(`  Source: ${dashboard.stats_cards.source || 'NON SP√âCIFI√â'}`);
            }
            
            console.log('\nüìä PL DETAILS:');
            if (dashboard.pl_details) {
                console.log(`  PL FINAL: ${Math.round(dashboard.pl_details.plFinal || 0).toLocaleString()} FCFA`);
                console.log(`  Cash Bictorys: ${Math.round(dashboard.pl_details.cashBictorys || 0).toLocaleString()} FCFA`);
                console.log(`  Source: ${dashboard.pl_details.source || 'NON SP√âCIFI√â'}`);
            }
            
            // Comparaison
            console.log('\nüÜö === COMPARAISON ===');
            const statsCardsPL = dashboard.stats_cards?.plFinal || 0;
            const plDetailsPL = dashboard.pl_details?.plFinal || 0;
            
            console.log(`Dashboard Stats PL FINAL: ${Math.round(statsCardsPL).toLocaleString()} FCFA`);
            console.log(`PL Details PL FINAL: ${Math.round(plDetailsPL).toLocaleString()} FCFA`);
            console.log(`Attendu (HTML scraping): -6,936,350 FCFA`);
            
            const ecartStats = Math.abs(statsCardsPL + 6936350);
            const ecartDetails = Math.abs(plDetailsPL + 6936350);
            
            console.log(`\n√âcart Stats Cards: ${ecartStats.toLocaleString()} FCFA`);
            console.log(`√âcart PL Details: ${ecartDetails.toLocaleString()} FCFA`);
            
            if (ecartStats < 100) {
                console.log('‚úÖ SUCCESS: Dashboard Stats utilise les valeurs scrap√©es !');
            } else if (ecartDetails < 100) {
                console.log('‚ö†Ô∏è PARTIAL: PL Details correct, mais Stats Cards pas mis √† jour');
            } else {
                console.log('‚ùå PROBL√àME: Aucune valeur ne correspond au scraping HTML');
            }
            
            // V√©rifier la source
            const statsSource = dashboard.stats_cards?.source;
            const detailsSource = dashboard.pl_details?.source;
            
            console.log(`\nüîç Sources:`);
            console.log(`  Stats Cards: ${statsSource || 'NON SP√âCIFI√â'}`);
            console.log(`  PL Details: ${detailsSource || 'NON SP√âCIFI√â'}`);
            
            if (statsSource === 'html_scraping' || detailsSource === 'html_scraping') {
                console.log('‚úÖ HTML Scraping d√©tect√© !');
            } else {
                console.log('‚ö†Ô∏è Pas de source HTML scraping trouv√©e');
            }
            
        } else {
            console.log('‚ùå Pas de donn√©es dashboard trouv√©es');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur test:', error.message);
    }
}

testSnapshotFixedValues();
