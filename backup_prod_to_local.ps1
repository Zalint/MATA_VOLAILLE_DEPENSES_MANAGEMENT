# üîÑ SCRIPT DE SAUVEGARDE PRODUCTION ‚Üí LOCAL (PowerShell)
# 
# Ce script effectue une copie s√©curis√©e de la base de donn√©es de production
# vers un environnement local de pr√©prod sans risquer de corrompre la production.
# 
# PR√âREQUIS:
# 1. PostgreSQL install√© avec pg_dump et psql dans le PATH
# 2. Connexion internet pour acc√©der √† la production
# 
# UTILISATION:
# .\backup_prod_to_local.ps1

param(
    [switch]$SkipVerify,
    [switch]$KeepDump,
    [string]$DumpFile = ""
)

# Configuration des bases de donn√©es
$PROD_CONFIG = @{
    Host = "dpg-d18i9lemcj7s73ddi0bg-a.frankfurt-postgres.render.com"
    Port = 5432
    Database = "depenses_management"
    User = "depenses_management_user"
    Password = "zbigeeX2oCEi5ElEVFZrjN3lEERRnVMu"
}

$LOCAL_CONFIG = @{
    Host = "localhost"
    Port = 5432
    Database = "depenses_management_preprod"
    User = "zalint"
    Password = "bonea2024"
}

# Couleurs pour l'affichage
function Write-ColorOutput([string]$message, [string]$color = "White") {
    switch ($color) {
        "Green" { Write-Host $message -ForegroundColor Green }
        "Red" { Write-Host $message -ForegroundColor Red }
        "Yellow" { Write-Host $message -ForegroundColor Yellow }
        "Blue" { Write-Host $message -ForegroundColor Blue }
        "Cyan" { Write-Host $message -ForegroundColor Cyan }
        default { Write-Host $message }
    }
}

# Fonction pour ex√©cuter des commandes avec gestion d'erreur
function Invoke-SafeCommand {
    param(
        [string]$Command,
        [string]$Description = "",
        [switch]$ContinueOnError
    )
    
    if ($Description) {
        Write-ColorOutput "üìù $Description" "Cyan"
    }
    
    Write-ColorOutput "üîÑ Ex√©cution: $Command" "Blue"
    
    try {
        $result = Invoke-Expression $Command
        if ($LASTEXITCODE -ne 0 -and -not $ContinueOnError) {
            throw "Command failed with exit code $LASTEXITCODE"
        }
        Write-ColorOutput "‚úÖ Succ√®s" "Green"
        return $result
    }
    catch {
        Write-ColorOutput "‚ùå Erreur: $($_.Exception.Message)" "Red"
        if (-not $ContinueOnError) {
            throw
        }
        return $null
    }
}

# Fonction pour v√©rifier les pr√©requis
function Test-Prerequisites {
    Write-ColorOutput "`nüîç === V√âRIFICATION DES PR√âREQUIS ===" "Yellow"
    
    # V√©rifier pg_dump
    try {
        $null = Get-Command pg_dump -ErrorAction Stop
        Write-ColorOutput "‚úÖ pg_dump trouv√©" "Green"
    }
    catch {
        Write-ColorOutput "‚ùå pg_dump non trouv√©. Installez PostgreSQL client tools." "Red"
        throw "PostgreSQL client tools required"
    }
    
    # V√©rifier psql
    try {
        $null = Get-Command psql -ErrorAction Stop
        Write-ColorOutput "‚úÖ psql trouv√©" "Green"
    }
    catch {
        Write-ColorOutput "‚ùå psql non trouv√©. Installez PostgreSQL client tools." "Red"
        throw "PostgreSQL client tools required"
    }
    
    # Test de connexion locale
    Write-ColorOutput "üîå Test de connexion √† la base locale..." "Cyan"
    $env:PGPASSWORD = $LOCAL_CONFIG.Password
    $testCommand = "psql -h $($LOCAL_CONFIG.Host) -p $($LOCAL_CONFIG.Port) -U $($LOCAL_CONFIG.User) -d postgres -c '\q'"
    
    try {
        Invoke-Expression $testCommand | Out-Null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Connexion locale OK" "Green"
        } else {
            throw "Connection failed"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Impossible de se connecter √† PostgreSQL local" "Red"
        Write-ColorOutput "   V√©rifiez que PostgreSQL est d√©marr√© et accessible" "Yellow"
        throw "Local PostgreSQL connection failed"
    }
    finally {
        Remove-Item Env:PGPASSWORD -ErrorAction SilentlyContinue
    }
}

# Fonction pour cr√©er la base de donn√©es locale
function New-LocalDatabase {
    Write-ColorOutput "`nüóÑÔ∏è === CR√âATION DE LA BASE LOCALE ===" "Yellow"
    
    $env:PGPASSWORD = $LOCAL_CONFIG.Password
    $adminUrl = "postgresql://$($LOCAL_CONFIG.User):$($LOCAL_CONFIG.Password)@$($LOCAL_CONFIG.Host):$($LOCAL_CONFIG.Port)/postgres"
    
    try {
        # Supprimer la base si elle existe
        $dropCommand = "psql `"$adminUrl`" -c `"DROP DATABASE IF EXISTS $($LOCAL_CONFIG.Database);`""
        Invoke-SafeCommand $dropCommand "Suppression de la base existante"
        
        # Cr√©er la nouvelle base
        $createCommand = "psql `"$adminUrl`" -c `"CREATE DATABASE $($LOCAL_CONFIG.Database) WITH ENCODING='UTF8';`""
        Invoke-SafeCommand $createCommand "Cr√©ation de la nouvelle base"
        
        Write-ColorOutput "‚úÖ Base de donn√©es locale '$($LOCAL_CONFIG.Database)' cr√©√©e avec succ√®s !" "Green"
    }
    finally {
        Remove-Item Env:PGPASSWORD -ErrorAction SilentlyContinue
    }
}

# Fonction pour faire le dump de la production
function Export-ProductionDatabase {
    Write-ColorOutput "`nüì¶ === DUMP DE LA BASE DE PRODUCTION ===" "Yellow"
    
    $timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
    if ($DumpFile) {
        $dumpFileName = $DumpFile
    } else {
        $dumpFileName = "prod_backup_$timestamp.sql"
    }
    
    $prodUrl = "postgresql://$($PROD_CONFIG.User):$($PROD_CONFIG.Password)@$($PROD_CONFIG.Host):$($PROD_CONFIG.Port)/$($PROD_CONFIG.Database)"
    
    Write-ColorOutput "üîÑ T√©l√©chargement des donn√©es de production..." "Cyan"
    Write-ColorOutput "üìÅ Fichier de sauvegarde: $dumpFileName" "Blue"
    
    # Commande pg_dump s√©curis√©e (lecture seule)
    $dumpCommand = "pg_dump `"$prodUrl`" --no-password --verbose --clean --if-exists --create --format=custom --file=`"$dumpFileName`""
    
    try {
        Invoke-SafeCommand $dumpCommand "Dump de la production"
        
        # V√©rifier que le fichier a √©t√© cr√©√©
        if (-not (Test-Path $dumpFileName)) {
            throw "Le fichier de sauvegarde n'a pas √©t√© cr√©√©"
        }
        
        $fileSize = (Get-Item $dumpFileName).Length
        $fileSizeMB = [math]::Round($fileSize / 1MB, 2)
        Write-ColorOutput "‚úÖ Dump termin√© ! Taille: $fileSizeMB MB" "Green"
        
        return $dumpFileName
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors du dump de production: $($_.Exception.Message)" "Red"
        throw
    }
}

# Fonction pour restaurer dans la base locale
function Import-ToLocalDatabase {
    param([string]$DumpFileName)
    
    Write-ColorOutput "`nüì• === RESTAURATION DANS LA BASE LOCALE ===" "Yellow"
    
    $env:PGPASSWORD = $LOCAL_CONFIG.Password
    $localUrl = "postgresql://$($LOCAL_CONFIG.User):$($LOCAL_CONFIG.Password)@$($LOCAL_CONFIG.Host):$($LOCAL_CONFIG.Port)/$($LOCAL_CONFIG.Database)"
    
    try {
        Write-ColorOutput "üîÑ Restauration des donn√©es..." "Cyan"
        
        # Commande pg_restore
        $restoreCommand = "pg_restore --no-password --verbose --clean --if-exists --dbname=`"$localUrl`" `"$DumpFileName`""
        
        Invoke-SafeCommand $restoreCommand "Restauration des donn√©es"
        
        Write-ColorOutput "‚úÖ Restauration termin√©e avec succ√®s !" "Green"
    }
    finally {
        Remove-Item Env:PGPASSWORD -ErrorAction SilentlyContinue
    }
}

# Fonction pour v√©rifier la copie
function Test-LocalDatabase {
    if ($SkipVerify) {
        Write-ColorOutput "`n‚è≠Ô∏è V√©rification ignor√©e (param√®tre -SkipVerify)" "Yellow"
        return
    }
    
    Write-ColorOutput "`nüîç === V√âRIFICATION DE LA COPIE ===" "Yellow"
    
    $env:PGPASSWORD = $LOCAL_CONFIG.Password
    $localUrl = "postgresql://$($LOCAL_CONFIG.User):$($LOCAL_CONFIG.Password)@$($LOCAL_CONFIG.Host):$($LOCAL_CONFIG.Port)/$($LOCAL_CONFIG.Database)"
    
    try {
        # Compter les tables
        $tablesCommand = "psql `"$localUrl`" -t -c `"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';`""
        $tableCountResult = Invoke-SafeCommand $tablesCommand -ContinueOnError
        $tableCount = if ($tableCountResult) { $tableCountResult.Trim() } else { "?" }
        
        # Compter les utilisateurs
        $usersCommand = "psql `"$localUrl`" -t -c `"SELECT COUNT(*) FROM users;`""
        $userCountResult = Invoke-SafeCommand $usersCommand -ContinueOnError
        $userCount = if ($userCountResult) { $userCountResult.Trim() } else { "?" }
        
        # Compter les comptes
        $accountsCommand = "psql `"$localUrl`" -t -c `"SELECT COUNT(*) FROM accounts;`""
        $accountCountResult = Invoke-SafeCommand $accountsCommand -ContinueOnError
        $accountCount = if ($accountCountResult) { $accountCountResult.Trim() } else { "?" }
        
        Write-ColorOutput "`nüìä === STATISTIQUES DE LA BASE LOCALE ===" "Cyan"
        Write-ColorOutput "üìã Tables: $tableCount" "White"
        Write-ColorOutput "üë• Utilisateurs: $userCount" "White"
        Write-ColorOutput "üí∞ Comptes: $accountCount" "White"
        
        if ($tableCount -gt 0 -and $userCount -gt 0) {
            Write-ColorOutput "‚úÖ La copie semble avoir r√©ussi !" "Green"
        } else {
            Write-ColorOutput "‚ö†Ô∏è La copie pourrait √™tre incompl√®te" "Yellow"
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erreur lors de la v√©rification: $($_.Exception.Message)" "Red"
    }
    finally {
        Remove-Item Env:PGPASSWORD -ErrorAction SilentlyContinue
    }
}

# Fonction principale
function Start-DatabaseCopy {
    Write-ColorOutput "üöÄ === D√âBUT DE LA COPIE PRODUCTION ‚Üí LOCAL ===`n" "Green"
    
    $startTime = Get-Date
    $dumpFileName = $null
    
    try {
        # √âtape 0: V√©rifier les pr√©requis
        Test-Prerequisites
        
        # √âtape 1: Cr√©er la base locale
        New-LocalDatabase
        
        # √âtape 2: Dump de la production
        $dumpFileName = Export-ProductionDatabase
        
        # √âtape 3: Restaurer dans la base locale
        Import-ToLocalDatabase $dumpFileName
        
        # √âtape 4: V√©rifier la copie
        Test-LocalDatabase
        
        $duration = [math]::Round((Get-Date).Subtract($startTime).TotalSeconds, 2)
        
        Write-ColorOutput "`nüéâ === COPIE TERMIN√âE AVEC SUCC√àS ===" "Green"
        Write-ColorOutput "‚è±Ô∏è Dur√©e: $duration secondes" "White"
        Write-ColorOutput "üìÅ Fichier de sauvegarde: $dumpFileName" "White"
        Write-ColorOutput "üóÑÔ∏è Base locale: $($LOCAL_CONFIG.Database)" "White"
        Write-ColorOutput "`nüí° Vous pouvez maintenant utiliser votre copie locale pour les tests !" "Cyan"
        
        # Gestion du fichier dump
        if (-not $KeepDump -and $dumpFileName -and (Test-Path $dumpFileName)) {
            Write-ColorOutput "`nüóëÔ∏è Suppression du fichier dump pour √©conomiser l'espace..." "Yellow"
            Remove-Item $dumpFileName -Force
            Write-ColorOutput "‚úÖ Fichier dump supprim√©" "Green"
        } elseif ($dumpFileName) {
            Write-ColorOutput "`nüìÅ Fichier dump conserv√©: $dumpFileName" "Blue"
            Write-ColorOutput "   Pour le supprimer plus tard: Remove-Item '$dumpFileName'" "Blue"
        }
        
    }
    catch {
        Write-ColorOutput "`nüí• === ERREUR FATALE ===" "Red"
        Write-ColorOutput $_.Exception.Message "Red"
        Write-ColorOutput "`nüîß V√©rifiez que:" "Yellow"
        Write-ColorOutput "   1. PostgreSQL est install√© et accessible" "White"
        Write-ColorOutput "   2. Les credentials de connection sont corrects" "White"
        Write-ColorOutput "   3. Vous avez une connexion internet pour la production" "White"
        Write-ColorOutput "   4. L'utilisateur local a les droits pour cr√©er des bases" "White"
        
        exit 1
    }
    finally {
        # Nettoyer les variables d'environnement sensibles
        Remove-Item Env:PGPASSWORD -ErrorAction SilentlyContinue
    }
}

# Affichage de l'aide
function Show-Help {
    Write-ColorOutput "üîÑ SCRIPT DE SAUVEGARDE PRODUCTION ‚Üí LOCAL" "Green"
    Write-ColorOutput ""
    Write-ColorOutput "UTILISATION:" "Yellow"
    Write-ColorOutput "  .\backup_prod_to_local.ps1 [OPTIONS]" "White"
    Write-ColorOutput ""
    Write-ColorOutput "OPTIONS:" "Yellow"
    Write-ColorOutput "  -SkipVerify    Ignorer la v√©rification de la copie" "White"
    Write-ColorOutput "  -KeepDump      Conserver le fichier dump apr√®s la copie" "White"
    Write-ColorOutput "  -DumpFile      Nom personnalis√© pour le fichier dump" "White"
    Write-ColorOutput "  -Help          Afficher cette aide" "White"
    Write-ColorOutput ""
    Write-ColorOutput "EXEMPLES:" "Yellow"
    Write-ColorOutput "  .\backup_prod_to_local.ps1" "Cyan"
    Write-ColorOutput "  .\backup_prod_to_local.ps1 -KeepDump" "Cyan"
    Write-ColorOutput "  .\backup_prod_to_local.ps1 -DumpFile 'ma_sauvegarde.sql'" "Cyan"
}

# Point d'entr√©e du script
if ($args -contains "-Help" -or $args -contains "--help" -or $args -contains "/?") {
    Show-Help
    exit 0
}

# Ex√©cution principale
Start-DatabaseCopy
