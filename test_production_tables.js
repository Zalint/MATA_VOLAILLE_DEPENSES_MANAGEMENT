/**
 * Script de v√©rification des tables en production
 * Teste que toutes les tables existent apr√®s le d√©ploiement
 */

const { Client } = require('pg');

async function testProductionTables() {
    console.log('üß™ TEST V√âRIFICATION TABLES PRODUCTION');
    console.log('üß™ ====================================');
    console.log('');

    // Configuration de connexion
    const dbConfig = process.env.URL ? {
        connectionString: process.env.URL,
        ssl: { rejectUnauthorized: false }
    } : {
        user: process.env.DB_USER || 'zalint',
        host: process.env.DB_HOST || 'localhost',
        database: process.env.DB_NAME || 'depenses_management',
        password: process.env.DB_PASSWORD || 'bonea2024',
        port: process.env.DB_PORT || 5432,
        ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    };

    console.log('üîó Configuration:', process.env.URL ? 'URL compl√®te' : 'Param√®tres s√©par√©s');
    console.log('üåê Environnement:', process.env.NODE_ENV || 'development');
    console.log('');

    const client = new Client(dbConfig);

    try {
        console.log('üì° Connexion √† la base de donn√©es...');
        await client.connect();
        console.log('‚úÖ Connexion r√©ussie!');
        console.log('');

        // Tables critiques √† v√©rifier
        const criticalTables = [
            'users',
            'accounts', 
            'expenses',
            'credit_history',
            'transfer_history',
            'partner_deliveries',
            'dashboard_snapshots',
            'creance_clients',
            'creance_operations',
            'cash_bictorys_mensuel',
            'financial_settings',
            'stock_vivant',
            'stock_mata'
        ];

        console.log('üîç V√©rification des tables...');
        console.log('');

        let allTablesExist = true;

        for (const tableName of criticalTables) {
            try {
                const result = await client.query(
                    `SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = $1 AND table_schema = 'public')`,
                    [tableName]
                );
                
                if (result.rows[0].exists) {
                    // Compter les lignes pour avoir une id√©e du contenu
                    const countResult = await client.query(`SELECT COUNT(*) as count FROM ${tableName}`);
                    const count = countResult.rows[0].count;
                    console.log(`‚úÖ ${tableName.padEnd(25)} - EXISTS (${count} records)`);
                } else {
                    console.log(`‚ùå ${tableName.padEnd(25)} - NOT FOUND!`);
                    allTablesExist = false;
                }
            } catch (error) {
                console.log(`‚ùå ${tableName.padEnd(25)} - ERROR: ${error.message}`);
                allTablesExist = false;
            }
        }

        console.log('');

        // V√©rifier l'utilisateur admin
        try {
            const adminResult = await client.query(
                "SELECT username, full_name, role FROM users WHERE username = 'admin'"
            );
            
            if (adminResult.rows.length > 0) {
                const admin = adminResult.rows[0];
                console.log('üë§ Utilisateur admin trouv√©:');
                console.log(`   üìß Username: ${admin.username}`);
                console.log(`   üë• Nom: ${admin.full_name}`);
                console.log(`   üîë R√¥le: ${admin.role}`);
            } else {
                console.log('‚ùå Utilisateur admin NON TROUV√â!');
                allTablesExist = false;
            }
        } catch (error) {
            console.log('‚ùå Erreur v√©rification admin:', error.message);
            allTablesExist = false;
        }

        console.log('');

        // V√©rifier quelques param√®tres financiers
        try {
            const settingsResult = await client.query(
                "SELECT setting_key, setting_value FROM financial_settings ORDER BY setting_key"
            );
            
            if (settingsResult.rows.length > 0) {
                console.log('‚öôÔ∏è Param√®tres financiers:');
                settingsResult.rows.forEach(setting => {
                    console.log(`   ${setting.setting_key}: ${setting.setting_value}`);
                });
            } else {
                console.log('‚ö†Ô∏è Aucun param√®tre financier trouv√©');
            }
        } catch (error) {
            console.log('‚ùå Erreur v√©rification param√®tres:', error.message);
        }

        console.log('');

        // R√©sum√© final
        if (allTablesExist) {
            console.log('üéâ ========================================');
            console.log('üéâ TOUTES LES TABLES SONT PR√âSENTES !');
            console.log('üéâ ========================================');
            console.log('‚úÖ L\'application est pr√™te pour la production');
            console.log('‚úÖ Plus de risque de timeout sur cr√©ation de tables');
            console.log('‚úÖ Le script render_volaille_database_schema.sql a bien fonctionn√©');
        } else {
            console.log('‚ùå ========================================');
            console.log('‚ùå CERTAINES TABLES SONT MANQUANTES !');
            console.log('‚ùå ========================================');
            console.log('üí° Actions recommand√©es:');
            console.log('   1. Ex√©cuter render_volaille_database_schema.sql');
            console.log('   2. V√©rifier les permissions de l\'utilisateur DB');
            console.log('   3. Contr√¥ler les logs de cr√©ation de base');
        }

    } catch (error) {
        console.error('‚ùå ERREUR DE CONNEXION:', error.message);
        console.error('');
        console.error('üí° V√©rifications:');
        console.error('   1. URL de connexion correcte?');
        console.error('   2. Base de donn√©es accessible?');
        console.error('   3. Permissions utilisateur?');
        process.exit(1);
    } finally {
        await client.end();
        console.log('');
        console.log('üîå Connexion ferm√©e');
    }
}

// Ex√©cution
testProductionTables().catch(console.error);
